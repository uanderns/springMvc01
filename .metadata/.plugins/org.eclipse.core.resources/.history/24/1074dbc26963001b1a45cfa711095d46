package br.com.cotiinformatica.config;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import br.com.cotiinformatica.repositories.impl.ClienteRepository;
import br.com.cotiinformatica.repositories.interfaces.IClienteRepository;

@Configuration
@ComponentScan(basePackages="br.com.cotiinformatica")
@EnableWebMvc
public class MvcConfiguration extends WebMvcConfigurerAdapter{

	@Bean
	public ViewResolver getViewResolver(){
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		resolver.setPrefix("/WEB-INF/views/");
		resolver.setSuffix(".jsp");
		return resolver;
	}
	
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");
	}
	
	@Bean
	public DataSource getDataSource() {
		
		//configurando a conexão do banco de dados gerenciada pelo spring
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
		
		//parametrizando a conexão..
		dataSource.setDriverClassName(".com.mysql.jdbc.Driver");
		dataSource.setUrl("jdbc:mysql://localhost:3306/aula06?useTimezone=true&serverTimezone=UTC&useSSL=false");
		dataSource.setUsername("root");
		dataSource.setPassword("uander");
		
		
		return dataSource;
	}
	
	/*
	 * Mapeamento da interface/ classe ClienteRepository. Desta forma o Spring será capaz 
	 * de injetar este repositorio em qualquer controller, de forma que o controller possa
	 * utilizar os metodos definidos no repositorio.
	 */
	@Bean
	public IClienteRepository getClienteRepository() {
		
		return new ClienteRepository(getDataSource());
	}
	
}
